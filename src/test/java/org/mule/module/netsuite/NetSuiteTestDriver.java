/**
 * Mule NetSuite Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.netsuite;

import static org.hamcrest.CoreMatchers.instanceOf;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThat;

import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.netsuite.api.NetSuiteClient;

import com.netsuite.webservices.platform.core_2010_2.types.CalendarEventAttendeeResponse;
import com.netsuite.webservices.platform.core_2010_2.types.RecordType;

import java.util.Calendar;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class NetSuiteTestDriver
{
    //FIXME the file path of the wsdl is embedded in the generated classes
    private NetSuiteCloudConnector connector;

    @Before
    public void setup() throws InitialisationException
    {
        connector = new NetSuiteCloudConnector();
        connector.setAddress("https://webservices.netsuite.com/services/NetSuitePort_2010_2");
        connector.setAccount(System.getenv("netsuiteAccount"));
        connector.setEmail(System.getenv("netsuiteEmail"));
        connector.setPassword(System.getenv("netsuitePassword"));
        connector.setRoleId("3");
        connector.initialise();
    }

    @Test
    public void getServerTime() throws Exception
    {
        assertThat(connector.GetServerTime(), instanceOf(Calendar.class));
    }

    @Test
    public void getEntities() throws Exception
    {
        assertFalse(connector.getRecords(RecordType.CURRENCY).isEmpty());
    }

    @Test
    public void attachAndDetachEntity()
    {
        connector.attachRecord(RecordType.CUSTOMER, "100", null, RecordType.CUSTOMER_STATUS, "45", null,
            null, null, null);
        connector.detachRecord(RecordType.CUSTOMER, "100", null, RecordType.CUSTOMER_STATUS, "45", null);
    }

    @Test
    public void deleteEntity()
    {
        connector.deleteRecord(RecordType.CUSTOMER, "8", null);
    }

    @Test
    public void getBudgetExchangeRate()
    {
        List<Object> budgetExchangeRate = connector.getBudgetExchangeRate("10", null, "65", null, null, null);
        assertNotNull(budgetExchangeRate);
    }

    // public NetSuiteClient<List<Object>, RuntimeException, Void> getClient()
    // {
    // return connector.getClient();
    // }
    //
    // public List<Object> getConsolidatedExchangeRate(String periodInternalId,
    // String periodExternalId,
    // String fromSubsidiaryInternalId,
    // String fromSubsidiaryExternalId,
    // String toSubsidiaryInternalId,
    // String toSubsidiaryExternalId)
    // {
    // return connector.getConsolidatedExchangeRate(periodInternalId,
    // periodExternalId,
    // fromSubsidiaryInternalId, fromSubsidiaryExternalId, toSubsidiaryInternalId,
    // toSubsidiaryExternalId);
    // }
    //
    // public List<Object> getCustomizationId(RecordType type, boolean
    // includeInactives)
    // {
    // return connector.getCustomizationId(type, includeInactives);
    // }
    //
    // public List<Object> getDeletedEntity(RecordType type, String whenExpression)
    // {
    // return connector.getDeletedEntity(type, whenExpression);
    // }
    //
    // public List<Object> getEntities(RecordType type)
    // {
    // return connector.getEntities(type);
    // }

    @Test
    public void getEntity()
    {
        connector.getRecord(RecordType.CAMPAIGN, null, "8875");
    }

    @Test
    public void GetItemAvailability()
    {
        assertNotNull(connector.GetItemAvailability());
    }

    @Test
    public void getSavedSearch()
    {
        connector.getSavedSearch(RecordType.CONTACT);
    }

    @Test
    public void updateInviteeStatus()
    {
        connector.updateInviteeStatus(RecordType.EMPLOYEE, null, "980",
            CalendarEventAttendeeResponse.DECLINED);
    }

}
