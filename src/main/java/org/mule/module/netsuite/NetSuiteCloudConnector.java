/**
 * Mule NetSuite Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.netsuite;

import static org.mule.module.netsuite.EntityReferences.*;
import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.netsuite.api.NetSuiteClient;
import org.mule.module.netsuite.api.model.entity.EntityId;
import org.mule.module.netsuite.api.model.entity.EntityReference;
import org.mule.module.netsuite.api.model.entity.EntityType;
import org.mule.module.netsuite.api.model.event.EventAttendeeStatus;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import java.util.List;

@Connector(namespacePrefix = "netsuite", namespaceUri = "http://www.mulesoft.org/schema/mule/netsuite")
public class NetSuiteCloudConnector implements Initialisable
{
    @Property(name = "client-ref", optional = true) 
    private NetSuiteClient<List<Object>, RuntimeException> client;

    @Operation
    public void attachEntity(@Parameter(optional = false) EntityType sourceEntityType,
                             @Parameter(optional = true) String sourceInternalId,
                             @Parameter(optional = true) String sourceExternalId,
                             @Parameter(optional = false) EntityType destinationEntityType,
                             @Parameter(optional = true) String destinationInternalId,
                             @Parameter(optional = true) String destinationExternalId,
                             @Parameter(optional = true) EntityType contanctEntityType,
                             @Parameter(optional = true) String contanctInternalId,
                             @Parameter(optional = true) String contanctExternalId)
    {
        client.attachEntity( //
            from(sourceEntityType, sourceInternalId, sourceExternalId), //
            from(destinationEntityType, destinationInternalId, destinationExternalId), // 
            nulSafefrom(contanctEntityType, contanctInternalId, contanctExternalId));
    }

    private EntityReference nulSafefrom(EntityType contanctEntityType,
                                        String contanctInternalId,
                                        String contanctExternalId)
    {
        return contanctEntityType != null
                                         ? from(contanctEntityType, contanctInternalId, contanctExternalId)
                                         : null;
    }

    @Operation
    public void deleteEntity(EntityType entityType, String internalId, String externalId)
    {
        client.deleteEntity(from(entityType, internalId, externalId));
    }

    @Operation
    public void detachEntity(EntityReference sourceEntity, EntityReference destinationEntity)
    {
        client.detachEntity(sourceEntity, destinationEntity);
    }

    @Operation
    public List<Object> getBudgetExchangeRate(EntityId period, EntityId fromSubsidiary, EntityId toSubsidiary)
    {
        return client.getBudgetExchangeRate(period, fromSubsidiary, toSubsidiary);
    }

    @Operation
    public List<Object> getConsolidatedExchangeRate(EntityId period,
                                                    EntityId fromSubsidiary,
                                                    EntityId toSubsidiary)
    {
        return client.getConsolidatedExchangeRate(period, fromSubsidiary, toSubsidiary);
    }

    @Operation
    public List<Object> getCustomizationId(EntityType type, boolean includeInactives)
    {
        return client.getCustomizationId(type, includeInactives);
    }

    @Operation
    public List<Object> getDeletedEntity(EntityType type, String whenExpression)
    {
        return client.getDeletedEntity(type, whenExpression);
    }

    @Operation
    public List<Object> getEntities(EntityType type)
    {
        return client.getEntities(type);
    }

    @Operation
    public Object getEntity(EntityReference sourceEntity)
    {
        return client.getEntity(sourceEntity);
    }

    @Operation
    public List<Object> getItemAvailability()
    {
        return client.getItemAvailability();
    }

    @Operation
    public List<Object> getSavedSearch(EntityType type)
    {
        return client.getSavedSearch(type);
    }

    @Operation
    public Object GetServerTime()
    {
        return client.getServerTime();
    }

    @Operation
    public void updateInviteeStatus(EntityReference entity, EventAttendeeStatus status)
    {
        client.updateInviteeStatus(entity, status);
    }

    public void initialise() throws InitialisationException
    {

    }
    
    public NetSuiteClient<List<Object>, RuntimeException> getClient()
    {
        return client;
    }
    public void setClient(NetSuiteClient<List<Object>, RuntimeException> client)
    {
        this.client = client;
    }
    

}
