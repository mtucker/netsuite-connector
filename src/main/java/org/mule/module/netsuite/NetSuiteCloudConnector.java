/**
 * Mule NetSuite Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.netsuite;

import static org.mule.module.netsuite.RecordReferences.from;
import static org.mule.module.netsuite.RecordReferences.nulSafeFrom;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.netsuite.api.CxfNetSuiteClient;
import org.mule.module.netsuite.api.DefaultCxfPortProvider;
import org.mule.module.netsuite.api.NetSuiteClient;
import org.mule.module.netsuite.api.NetSuiteClientAdaptor;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import com.netsuite.webservices.platform.core_2010_2.RecordRef;
import com.netsuite.webservices.platform.core_2010_2.types.CalendarEventAttendeeResponse;
import com.netsuite.webservices.platform.core_2010_2.types.RecordType;

@Connector(namespacePrefix = "netsuite", namespaceUri = "http://www.mulesoft.org/schema/mule/netsuite")
public class NetSuiteCloudConnector implements Initialisable
{
    @Property(name = "client-ref", optional = true)
    private NetSuiteClient<List<Object>, RuntimeException, Void> client;
    @Property
    private String address;
    @Property
    private String email;
    @Property
    private String password;
    @Property
    private String account;
    @Property
    private String roleId;

    /**
     * 
     * @param sourceRecordType
     * @param sourceInternalId
     * @param sourceExternalId
     * @param destinationRecordType
     * @param destinationInternalId
     * @param destinationExternalId
     * @param contanctRecordType
     * @param contanctInternalId
     * @param contanctExternalId
     */
    @Operation
    public void attachRecord(@Parameter(optional = false) RecordType sourceRecordType,
                             @Parameter(optional = true) String sourceInternalId,
                             @Parameter(optional = true) String sourceExternalId,
                             @Parameter(optional = false) RecordType destinationRecordType,
                             @Parameter(optional = true) String destinationInternalId,
                             @Parameter(optional = true) String destinationExternalId,
                             @Parameter(optional = true) RecordType contanctRecordType,
                             @Parameter(optional = true) String contanctInternalId,
                             @Parameter(optional = true) String contanctExternalId)
    {
        client.attachRecord( //
            from(sourceRecordType, sourceInternalId, sourceExternalId), //
            from(destinationRecordType, destinationInternalId, destinationExternalId), // 
            nulSafeFrom(contanctRecordType, contanctInternalId, contanctExternalId));
    }

    /**
     * 
     * @param recordType
     * @param internalId
     * @param externalId
     */
    @Operation
    public void deleteRecord(@Parameter RecordType recordType,
                             @Parameter(optional = true) String internalId,
                             @Parameter(optional = true) String externalId)
    {
        client.deleteRecord(from(recordType, internalId, externalId));
    }

    /**
     * 
     * @param sourceRecordType
     * @param sourceInternalId
     * @param sourceExternalId
     * @param destinationRecordType
     * @param destinationInternalId
     * @param destinationExternalId
     */
    @Operation
    public void detachRecord(@Parameter RecordType sourceRecordType,
                             @Parameter(optional = true) String sourceInternalId,
                             @Parameter(optional = true) String sourceExternalId,
                             @Parameter RecordType destinationRecordType,
                             @Parameter(optional = true) String destinationInternalId,
                             @Parameter(optional = true) String destinationExternalId)
    {
        client.detachRecord(//
            from(sourceRecordType, sourceInternalId, sourceExternalId), // 
            from(destinationRecordType, destinationInternalId, destinationExternalId));
    }

    /**
     * 
     * @param periodInternalId
     * @param periodExternalId
     * @param fromSubsidiaryInternalId
     * @param fromSubsidiaryExternalId
     * @param toSubsidiaryInternalId
     * @param toSubsidiaryExternalId
     * @return
     */
    @Operation
    public List<Object> getBudgetExchangeRate(@Parameter(optional = true) String periodInternalId,
                                              @Parameter(optional = true) String periodExternalId,
                                              @Parameter(optional = true) String fromSubsidiaryInternalId,
                                              @Parameter(optional = true) String fromSubsidiaryExternalId,
                                              @Parameter(optional = true) String toSubsidiaryInternalId,
                                              @Parameter(optional = true) String toSubsidiaryExternalId)
    {
        return client.getBudgetExchangeRate(//
            RecordIds.from(periodInternalId, periodExternalId), // 
            RecordIds.from(fromSubsidiaryInternalId, fromSubsidiaryExternalId), //
            RecordIds.nullSafeFrom(toSubsidiaryInternalId, toSubsidiaryExternalId));
    }

    /**
     * 
     * @param periodInternalId
     * @param periodExternalId
     * @param fromSubsidiaryInternalId
     * @param fromSubsidiaryExternalId
     * @param toSubsidiaryInternalId
     * @param toSubsidiaryExternalId
     * @return
     */
    @Operation
    public List<Object> getConsolidatedExchangeRate(@Parameter(optional = true) String periodInternalId,
                                                    @Parameter(optional = true) String periodExternalId,
                                                    @Parameter(optional = true) String fromSubsidiaryInternalId,
                                                    @Parameter(optional = true) String fromSubsidiaryExternalId,
                                                    @Parameter(optional = true) String toSubsidiaryInternalId,
                                                    @Parameter(optional = true) String toSubsidiaryExternalId)
    {
        return client.getConsolidatedExchangeRate(//
            RecordIds.from(periodInternalId, periodExternalId), // 
            RecordIds.from(fromSubsidiaryInternalId, fromSubsidiaryExternalId), //
            RecordIds.nullSafeFrom(toSubsidiaryInternalId, toSubsidiaryExternalId));
    }

    /**
     * 
     * @param type
     * @param includeInactives
     * @return
     */
    @Operation
    public List<Object> getCustomizationId(@Parameter RecordType type,
                                           @Parameter(optional = true, defaultValue = "false") boolean includeInactives)
    {
        return client.getCustomizationId(type, includeInactives);
    }

    /**
     * 
     * @param type
     * @param whenExpression
     * @return
     */
    @Operation
    public List<Object> getDeletedRecord(@Parameter RecordType type, @Parameter String whenExpression)
    {
        return client.getDeletedRecord(type, whenExpression);
    }

    /**
     * 
     * @param type
     * @return
     */
    @Operation
    public List<Object> getRecords(@Parameter RecordType type)
    {
        return client.getRecords(type);
    }

    /**
     * 
     * @param recordType
     * @param internalId
     * @param externalId
     * @return
     */
    @Operation
    public Object getRecord(@Parameter RecordType recordType,
                            @Parameter(optional = true) String internalId,
                            @Parameter(optional = true) String externalId)
    {
        return client.getRecord(from(recordType, internalId, externalId));
    }

    @Operation
    public List<Object> getItemAvailability(@Parameter RecordType recordType,
                                            @Parameter(optional = true) String internalId,
                                            @Parameter(optional = true) String externalId,
                                            @Parameter(optional = true) Date ifNotModifiedSince)
    {
        return client.getItemAvailability(from(recordType, internalId, externalId), ifNotModifiedSince);
    }

    /**
     * 
     * @param type
     * @return
     */
    @Operation
    public List<Object> getSavedSearch(@Parameter RecordType type)
    {
        return client.getSavedSearch(type);
    }

    /**
     * 
     * @return
     */
    @Operation
    public Date GetServerTime()
    {
        return ((XMLGregorianCalendar) client.getServerTime()).toGregorianCalendar().getTime();
    }

    @Operation
    public void updateInviteeStatus(@Parameter RecordType recordType,
                                    @Parameter(optional = true) String internalId,
                                    @Parameter(optional = true) String externalId,
                                    @Parameter CalendarEventAttendeeResponse status)
    {
        client.updateInviteeStatus(from(recordType, internalId, externalId), status);
    }

    /**
     * 
     * @param recordType
     * @param recordAttributes
     * @return
     */
    @Operation
    public RecordRef addRecord(@Parameter RecordType recordType,
                               @Parameter Map<String, Object> recordAttributes)
    {
        return ((RecordRef) client.addRecord(recordType, recordAttributes));
    }
    
    /**
     * 
     * @param jobId
     * @return
     */
    @Operation
    public Object checkAsyncStatus(@Parameter String jobId)
    {
        return client.checkAsyncStatus(jobId);
    }

    /**
     * 
     * @param recordType
     * @param expression
     * @return
     */
    @Operation
    public List<Object> findRecord(@Parameter RecordType recordType,
            @Parameter String expression)
    {
       return client.findRecord(recordType, expression);
    }

    /**
     * 
     * @param jobId
     * @param pageIndex
     * @return
     */
    @Operation
    public Object getAsyncResult(@Parameter String jobId, @Parameter int pageIndex)
    {
        return client.getAsyncResult(jobId, pageIndex);
    }

    /**
     * 
     * @param type
     * @param recordType
     * @param internalId
     * @param externalId
     * @return
     */
    @Operation
    public Object initialize(@Parameter RecordType type,
                             @Parameter RecordType recordType,
                             @Parameter(optional = true) String internalId,
                             @Parameter(optional = true) String externalId)
    {
        return client.initialize(type, from(recordType, internalId, externalId));
    }

    public void initialise() throws InitialisationException
    {
        if (client == null)
        {
            setClient(new CxfNetSuiteClient(new DefaultCxfPortProvider(address, email, password, account,
                roleId)));
        }
    }

    public NetSuiteClient<List<Object>, RuntimeException, Void> getClient()
    {
        return client;
    }

    public void setClient(NetSuiteClient<?, ?, ?> client)
    {
        this.client = NetSuiteClientAdaptor.adapt(client);
    }

    public String getAddress()
    {
        return address;
    }

    public String getRoleId()
    {
        return roleId;
    }

    public void setRoleId(String roleId)
    {
        this.roleId = roleId;
    }

    public void setAddress(String address)
    {
        this.address = address;
    }

    public String getEmail()
    {
        return email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String getAccount()
    {
        return account;
    }

    public void setAccount(String account)
    {
        this.account = account;
    }

}
