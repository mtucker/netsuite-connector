/**
 * Mule NetSuite Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.netsuite;

import static org.mule.module.netsuite.RecordReferences.from;
import static org.mule.module.netsuite.RecordReferences.nulSafeFrom;

import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.netsuite.api.CxfNetSuiteClient;
import org.mule.module.netsuite.api.DefaultCxfPortProvider;
import org.mule.module.netsuite.api.NetSuiteClient;
import org.mule.module.netsuite.api.NetSuiteClientAdaptor;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import com.netsuite.webservices.platform.core_2010_2.AsyncStatusResult;
import com.netsuite.webservices.platform.core_2010_2.Record;
import com.netsuite.webservices.platform.core_2010_2.RecordRef;
import com.netsuite.webservices.platform.core_2010_2.types.CalendarEventAttendeeResponse;
import com.netsuite.webservices.platform.core_2010_2.types.RecordType;
import com.netsuite.webservices.platform.messages_2010_2.AsyncResult;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

/**
 * The NetSuite cloud connector facade, based on a {@link NetSuiteClient}
 * 
 * @author flbulgarelli
 */
@Connector(namespacePrefix = "netsuite", namespaceUri = "http://www.mulesoft.org/schema/mule/netsuite")
public class NetSuiteCloudConnector implements Initialisable
{
    private static final String SUITETALK_ADDRESS = "https://webservices.netsuite.com/services/NetSuitePort_2010_2";
    
    @Property(name = "client-ref", optional = true)
    private NetSuiteClient<List<Object>, RuntimeException, Void> client;
    
    /**
     * The login email of both NetSuite UI and SuiteTalk
     */
    @Property
    private String email;
    /**
     * The login password of both the NetSuite UI and SuiteTalk
     */
    @Property
    private String password;
    /**
     * SuiteTalk -NetSuite WebService - account id. It looks like TSTDRVXXXXXX
     */
    @Property
    private String account;
    /**
     * The id of the role used to login in SuiteTalk, which determines the operations
     * privileges
     */
    @Property
    private String roleId;
    
    /**
     * Attaches a record to another one, optionally specifying a contact for the
     * attachment. Not all record type are supported as source, destination or
     * contact. Please consult NetSuite documentation.
     * Example:
     * 
     * {@code <netsuite:attach-record 
     *          sourceRecordType="BUDGET"
     *          sourceId="500" 
     *          sourceIdType="EXTERNAL" 
     *          destinationId="1590"
     *          destinationRecordType="ACCOUNT" />}
     * 
     * @param sourceRecordType the type of the target record to be attached
     * @param sourceId the id of the target record to be attached
     * @param sourceIdType the id type of the record to be attached
     * @param destinationRecordType the type of the record to be attached to
     * @param destinationId the id of the record to be attached to
     * @param destinationIdType the id type of the record to be attached to
     * @param contanctRecordType the record type of the optional contact record
     * @param contanctId the id of the optional contact record
     * @param contanctIdType the id type of the optional contact record
     */
    @Operation
    public void attachRecord(@Parameter(optional = false) RecordType sourceRecordType,
                             @Parameter(optional = false) String sourceId,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType sourceIdType,
                             @Parameter(optional = false) RecordType destinationRecordType,
                             @Parameter(optional = false) String destinationId,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType destinationIdType,
                             @Parameter(optional = true) RecordType contanctRecordType,
                             @Parameter(optional = true) String contanctId,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType contanctIdType)
    {
        client.attachRecord( //
            from(sourceRecordType, sourceId, sourceIdType), //
            from(destinationRecordType, destinationId, destinationIdType), // 
            nulSafeFrom(contanctRecordType, contanctId, contanctIdType));
    }

    /**
     * Deletes a record
     * 
     * Example:
     * 
     * {@code <netsuite:delete-record recordType="CONTACT" id="986" idType="EXTERNAL"/> }
     *  
     * @param recordType the type of the record to delete
     * @param id the id of the record to delete
     * @param idType the type of id of the record to delete
     */
    @Operation
    public void deleteRecord(@Parameter RecordType recordType,
                             @Parameter String id,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType idType)
    {
        client.deleteRecord(from(recordType, id, idType));
    }

    /**
     * Detaches a record
     * Example:
     * 
     * {@code <netsuite:detach-record destinationRecordType="ACCOUNT" destinationId="96" sourceRecordType="ACCOUNT" sourceId="16"/>}
      
     * @param sourceRecordType the type of the target record to be detached
     * @param sourceId the id of the target record to be detached
     * @param sourceIdType the id type of the record to be detached
     * @param destinationRecordType the type of the record to be detached to
     * @param destinationId the id of the record to be detached to
     * @param destinationIdType the id type of the record to be detached to
     */
    @Operation
    public void detachRecord(@Parameter RecordType sourceRecordType,
                             @Parameter String sourceId,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType sourceIdType,
                             @Parameter RecordType destinationRecordType,
                             @Parameter String destinationId,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType destinationIdType)
    {
        client.detachRecord(//
            from(sourceRecordType, sourceId, sourceIdType), // 
            from(destinationRecordType, destinationId, destinationIdType));
    }

    /**
     * Answers the list of budget exchange rates
     * Example:
     * 
     * {@code <netsuite:get-budget-exchange-rate periodId="986" fromSubsidiaryId="62" fromSubsidiaryIdType="EXTERNAL"/>}
     * 
     * @param periodId the id of the period 
     * @param periodIdType the period id type
     * @param fromSubsidiaryId the id of the staring  subsidiary 
     * @param fromSubsidiaryIdType the starting subsidiary id type
     * @param toSubsidiaryId the  the id of the optional ending subsidiary  
     * @param toSubsidiaryIdType the id type of the optional ending subsidiary
     * @return a list of BudgetExchangeRate's
     */
    @Operation
    public List<Object> getBudgetExchangeRate(@Parameter String periodId,
                                              @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType periodIdType,
                                              @Parameter String fromSubsidiaryId,
                                              @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType fromSubsidiaryIdType,
                                              @Parameter(optional = true) String toSubsidiaryId,
                                              @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType toSubsidiaryIdType)
    {
        return client.getBudgetExchangeRate(//
            RecordIds.from(periodId, periodIdType), // 
            RecordIds.from(fromSubsidiaryId, fromSubsidiaryIdType), //
            RecordIds.nullSafeFrom(toSubsidiaryId, toSubsidiaryIdType));
    }

    /**
     * Answers the list of consolidated exchange rates
     * Example:
     * <netsuite:get-consolidated-exchange-rate
     *       periodId="106" 
     *       periodIdType="EXTERNAL" 
     *       fromSubsidiaryId="5689"
     *       toSubsidiaryId="4898" />
     * 
     * @param periodId the id of the period 
     * @param periodIdType the period id type
     * @param fromSubsidiaryId the id of the staring  subsidiary 
     * @param fromSubsidiaryIdType the starting subsidiary id type
     * @param toSubsidiaryId the  the id of the optional ending subsidiary  
     * @param toSubsidiaryIdType the id type of the optional ending subsidiary
     * @return a list of ConsolidatedExchangeRate's
     */
    @Operation
    public List<Object> getConsolidatedExchangeRate(@Parameter String periodId,
                                                    @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType periodIdType,
                                                    @Parameter String fromSubsidiaryId,
                                                    @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType fromSubsidiaryIdType,
                                                    @Parameter(optional = true) String toSubsidiaryId,
                                                    @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType toSubsidiaryIdType)
    {
        return client.getConsolidatedExchangeRate(//
            RecordIds.from(periodId, periodIdType), // 
            RecordIds.from(fromSubsidiaryId, fromSubsidiaryIdType), //
            RecordIds.nullSafeFrom(toSubsidiaryId, toSubsidiaryIdType));
    }

    /**
     * Answers the available customizations for a given record type
     * Example:
     * {@code <netsuite:get-customization-id type="ACCOUNT"/>}
     * @param type the target record type
     * @param includeInactives if inactive customizations should also be returned
     * @return a list of CustomizationRef's
     */
    @Operation
    public List<Object> getCustomizationId(@Parameter RecordType type,
                                           @Parameter(optional = true, defaultValue = "false") boolean includeInactives)
    {
        return client.getCustomizationId(type, includeInactives);
    }

    /**
     * Answers a list of deleted records of a given record type
     * 
     * Examples:
     * 
     * {@code <netsuite:get-deleted-record type="CUSTOMER_PAYMENT" whenExpression="within(thisWeek)"/>
     *        <netsuite:get-deleted-record type="BIN" whenExpression="after(yesterday)"/>
     *        <netsuite:get-deleted-record type="EMPLOYEE" whenExpression="on(today)"/>
     *        <netsuite:get-deleted-record type="CUSTOMER" whenExpression="before(isoDate(2005-11-14))"/>
     *        <netsuite:get-deleted-record type="TASK" whenExpression="notWithin(dateTimeRange('15:14:10', '19:14:10', 'HH:mm:ss'))"/>}
     * 
     * @param type the type of the target deleted record to retrieve 
     * @param whenExpression a predicate-style date filtering expression,
     *        in the form &lt;operation&gt;( &lt;predefinedSearchValue&gt; 
     *        \| &lt;isoDate( &lt;isoDate&gt; )&gt; \| &lt;isoDateRange(&lt;isoDate1&gt;, &lt;isoDate2&gt;)&gt; 
     *        \| &lt;dateTime( '&lt;date&gt;', '&lt;format&gt;' )&gt; 
     *        \| &lt;dateTimeRange( '&lt;date1&gt;', '&lt;date2&gt;', '&lt;format&gt;' )&gt; ), where predefinedSearchValue 
     *        and operation are a subset of the most common predefinedSearchValues and operations supported by Netsuite
     * @return the list of deleted records that match the given date filtering expression
     *///TODO finish doc
    @Operation
    public List<Object> getDeletedRecord(@Parameter RecordType type, @Parameter String whenExpression)
    {
        return  client.getDeletedRecord(type, whenExpression);
    }

    /**
     * Answers all the record of a given type
     * Example:
     * 
     * {@code <netsuite:get-records type="ENTITY_CUSTOM_FIELD"/>}
     * @param type the target record type  
     * @return the list of Record's
     */
    @Operation
    public List<Object> getRecords(@Parameter RecordType type)
    {
        return client.getRecords(type);
    }

    /**
     * Answers a record given its id
     * Example:
     * {@code <netsuite:get-record recordType="CREDIT_MEMO" id="982"/>}
     * @param recordType the target record type
     * @param id the target record id
     * @param idType the id type of the given record id
     * @return a Record
     */
    @Operation
    public Object getRecord(@Parameter RecordType recordType,
                            @Parameter(optional = false) String id,
                            @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType idType)
    {
        return client.getRecord(from(recordType, id, idType));
    }

    /**
     * Answers the availability for a given record reference.
     * If the Multi-Location Inventory feature is enabled, this operation returns results for all locations. 
     * For locations that do not have any items available, only location IDs and names are listed in results. 
     * Example:
     * 
     * {@code <netsuite:get-item-availability recordType="ACCOUNT" id="#[map-payload:recordId]"/>}
     * @param recordType the target record type
     * @param id the target record id
     * @param idType the id type of the given record id
     * @param ifModifiedSince an optional modified since date. 
     *         If set, only items with quantity available changes recorded as of the specified date are returned.
     * @return A list of ItemAvailability's
     */
    @Operation
    public List<Object> getItemAvailability(@Parameter RecordType recordType,
                                            @Parameter(optional = false) String id,
                                            @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType idType,
                                            @Parameter(optional = true) Date ifModifiedSince)
    {
        return client.getItemAvailability(from(recordType, id, idType), ifModifiedSince);
    }

    /**
     * Retrieves a list of existing saved searches for the given record type.
     * Example:
     * 
     * {@code <netsuite:get-saved-search type="ACCOUNT"/>}
     * @param type the target record type
     * @return the list of RecordRedf's 
     */
    @Operation
    public List<Object> getSavedSearch(@Parameter RecordType type)
    {
        return client.getSavedSearch(type);
    }

    /**
     * Answers the server time, resulting in more accurate and reliable sync'ing of data than using
     * using local client time. Example:
     * 
     * {@code <netsuite:get-server-time />}
     *
     * @return the server time, as a Date
     */
    @Operation
    public Date GetServerTime()
    {
        return ((XMLGregorianCalendar) client.getServerTime()).toGregorianCalendar().getTime();
    }

    /**
     * Sets a new invitation status for a given event. Example:
     * Example:
     * 
     * {@code <netsuite:update-invitee-status eventId="#[map-payload:eventId]" status="TENTATIVE"/>}
     * @param eventId the target event id
     * @param eventIdType the id type of the given eventId
     * @param status the new status to set
     */
    @Operation
    public void updateInviteeStatus(@Parameter(optional = false) String eventId,
                                    @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType eventIdType,
                                    @Parameter CalendarEventAttendeeResponse status)
    {
        client.updateInviteeStatus(RecordIds.from(eventId, eventIdType), status);
    }

    //TODO support object passing?
    
    /**
     * Creates a new record
     * 
     * @param recordType  the type of record to add
     * @param attributes the record attributes, as a string-object map
     * @return the RecordRef of the new record
     */
    @Operation
    public RecordRef addRecord(@Parameter RecordType recordType,
                               @Parameter Map<String, Object> attributes)
    {
        return ((RecordRef) client.addRecord(recordType, attributes));
    }
    
    /**
     * Updates an existing record.
     * Example:
     * 
     * {@code <netsuite:update-record recordType="EMPLOYEE" id="#[map-payload:recordId]">
     *       <netsuite:attributes>
     *           <netsuite:attribute key="mobilePhone" value="#[map-payload:mobilePhone]" />
     *           <netsuite:attribute key="homePhone" value="#[map-payload:homePhone]" />
     *       </netsuite:attributes>
     *   </netsuite:update-record>}
     * 
     * @param recordType the target record type to update
     * @param id the target record id
     * @param idType the id type of the given record id
     * @param attributes the record attributes, as a string-object map
     */
    @Operation
    public void updateRecord(@Parameter RecordType recordType,
                               @Parameter(optional = false) String id,
                               @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType idType,
                               @Parameter Map<String, Object> attributes) throws Exception
    {
        client.updateRecord(from(recordType, id, idType), attributes);
    }

    /**
     * Answers the status of an asynchronous Web services submission. When a jobId is
     * submitted, the status, percent complete, and estimated remaining duration are
     * returned.
     * 
     * Example:
     * 
     * {@code <netsuite:get-budget-exchange-rate periodId="986" fromSubsidiaryId="62" fromSubsidiaryIdType="EXTERNAL"/>}
     * 
     * @param jobId
     * @return the AsyncStatusResult for the given job
     */
    @Operation 
    public AsyncStatusResult checkAsyncStatus(@Parameter String jobId)
    {
        //TODO check it is returning the proper object
        return (AsyncStatusResult) client.checkAsyncStatus(jobId);
    }

   /*TODO*/
    @Operation
    public List<Object> findRecord(@Parameter RecordType recordType, @Parameter String expression)
    {
        return client.findRecord(recordType, expression);
    }

    /**
     * Answers the results of an asynchronous web services submission. This operation
     * can be executed operation up to 20 times within a 30 day time period to
     * retrieve the results of an asynchronous job.
     * Example:
     * {@code <netsuite:get-async-result jobId="#[map-payload:jobId]" pageIndex="#[map-payload:pageIndex]" />}
     * 
     * @param jobId the id of the job
     * @param pageIndex the page number the the async result
     * @return the AsyncResult
     */
    @Operation
    public AsyncResult getAsyncResult(@Parameter String jobId, /*TODO check if mandatory */ @Parameter int pageIndex)
    {
        return (AsyncResult) client.getAsyncResult(jobId, pageIndex);
    }

    /**
     * Populates fields on transaction line items with values from a related record,
     * in a similar way empty text boxes are prepopulated within the Netsuite UI
     * Example:
     * 
     * {@code <netsuite:initialize type="INVOICE" id="#[map-payload:recordId]" recordType="SALES_ORDER" /> }
     * 
     * @param type the type of record whose defaults values are used to populate the
     *            target record
     * @param recordType the target record type
     * @param id the target record id
     * @param idType the id type of the given record id
     * @return the initialized Record
     */
    @Operation
    public Record initialize(@Parameter RecordType type,
                             @Parameter RecordType recordType,
                             @Parameter(optional = false) String id,
                             @Parameter(optional = true, defaultValue = "INTERNAL") RecordIdType idType)
    {
        return (Record) client.initialize(type, from(recordType, id, idType));
    }

    public void initialise() throws InitialisationException
    {
        if (client == null)
        {
            setClient(new CxfNetSuiteClient(new DefaultCxfPortProvider(SUITETALK_ADDRESS, email, password, account,
                roleId)));
        }
    }

    public NetSuiteClient<List<Object>, RuntimeException, Void> getClient()
    {
        return client;
    }

    public void setClient(NetSuiteClient<?, ?, ?> client)
    {
        this.client = NetSuiteClientAdaptor.adapt(client);
    }


    public String getRoleId()
    {
        return roleId;
    }

    public void setRoleId(String roleId)
    {
        this.roleId = roleId;
    }

    public String getEmail()
    {
        return email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String getAccount()
    {
        return account;
    }

    public void setAccount(String account)
    {
        this.account = account;
    }

}
