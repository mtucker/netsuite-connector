options {
   STATIC = false ;
}
PARSER_BEGIN(FilterExpressionParser)
    package org.mule.module.netsuite.api.model.expression.filter;
    import com.netsuite.webservices.platform.core_2010_2.*;
    import  java.io.ByteArrayInputStream;

   /**
    * A predicate-like syntax parser for date expressions
    * @author flbulgarelli*/
   public class FilterExpressionParser {
   
     private FilterExpressionBuilder builder = new FilterExpressionBuilder(); 
   
     public static SearchRecord parse(String expression)  {
       org.apache.commons.lang.Validate.notEmpty(expression);
        try{
          return new FilterExpressionParser(new ByteArrayInputStream(expression.getBytes())).start();
      } catch(ParseException e){
         throw new IllegalArgumentException("Syntax error in date expression " + expression, e);
      }
    } 
       
       /*
       TOKEN : { < UNARY_OP : "empty"| "notEmpty" > }
TOKEN : { < BINARY_OP : "contains"| "doesNotContain"| "doesNotStartWith"| "is"| "isNot"| "startsWith"| "equalTo"| "greaterThan"| "greaterThanOrEqualTo"| "lessThan"| "lessThanOrEqualTo"| "notEqualTo" > }
TOKEN : { < TERNARY_OP : "between"| "notBetween" > }
       */
}
   
PARSER_END(FilterExpressionParser)


SKIP : { " " | "\n" | "\r" | "\t" }

TOKEN : { < COMMA : "," > }

TOKEN : { < DOT : "." > }

TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }

TOKEN : { < UNQUOTED_STRING : (["a"-"z","A"-"Z","0"-"9"])+ > }

TOKEN : { < STRING : "'" (~["'"])* "'" | "\"" (~["\""])* "\"" > }

SearchRecord start() : 
{ Token operation, target, attribute, arg0 = null, arg1 = null; }
{ 
  operation = < UNQUOTED_STRING >
  < OPEN_PAR >
  target = < UNQUOTED_STRING >
  < DOT >
  attribute = < UNQUOTED_STRING > 
  (< COMMA >
  arg0 = < UNQUOTED_STRING >
  (< COMMA >
  arg1 = < UNQUOTED_STRING >)?)?
  < CLOSE_PAR > 
  { builder.setOperation(operation.image);}
  { builder.setTarget(target.image);}
  { builder.setAttribute(attribute.image);}
  { if(arg0 != null) builder.setFirstArg(arg0.image);}
  { if(arg1 != null) builder.setSecondArg(arg1.image);}
  {return builder.build();}
}



