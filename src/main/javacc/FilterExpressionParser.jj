options {
   STATIC = false ;
}
PARSER_BEGIN(FilterExpressionParser)
    package org.mule.module.netsuite.api.model.expression.filter;
    import com.netsuite.webservices.platform.core_2010_2.*;
    import com.netsuite.webservices.platform.core_2010_2.types.*;
    import  java.io.ByteArrayInputStream;
    import org.apache.commons.lang.*;
    import java.util.*;

   /**
    * A predicate-like syntax parser for filter expressions
    * @author flbulgarelli*/
   public class FilterExpressionParser {
   
     private FilterExpressionBuilder builder = new FilterExpressionBuilder(); 
   
     public static SearchRecord parse(SearchRecordType targetRecordType, String expression)  {
       Validate.notNull(targetRecordType);
       if( StringUtils.isEmpty(expression) )  
        return targetRecordType.newSearchInstance();
       
        try{
          return new FilterExpressionParser(new ByteArrayInputStream(expression.getBytes())).withTarget(targetRecordType).start();
      } catch(ParseException e){
         throw new IllegalArgumentException("Syntax error in date expression " + expression + ". Cause: " + e.getMessage());
      }
    } 
    
    public FilterExpressionParser withTarget(SearchRecordType target) {
        builder.setTarget(target);
        return this;
    }
    
    private static String nullSafeImage(Token token) { 
      return token != null ? token.image : null;
    }
}
   
PARSER_END(FilterExpressionParser)


SKIP : { " " | "\n" | "\r" | "\t" }

TOKEN : { < COMMA : "," > }

TOKEN : { < DOT : "." > }

TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < OPEN_BRACKET : "[" > }
TOKEN : { < CLOSE_BRACKET : "]" > }

TOKEN : { < INTERNAL : "internal" > }
TOKEN : { < EXTERNAL : "external" > }
TOKEN : { < IDENTIFIER : ["a"-"z","A"-"Z", "_"](["a"-"z","A"-"Z","0"-"9"])* > }

TOKEN : { < VALUE :  (["0"-"9",".", "+", "-"])+ | "'" (~["'"])* "'" | "\"" (~["\""])* "\"" > }


SearchRecord start() : 
{ }
{ 
   expression() ( < COMMA > expression() )* 
  {return builder.build();}
}

void expression() :
{Token operation, attributeOrJoin, attribute = null, arg1 = null; Object arg0 = null; }
{ operation = < IDENTIFIER >
  < OPEN_PAR >
  attributeOrJoin = < IDENTIFIER >
  (< DOT >
  attribute = < IDENTIFIER >)? 
  (< COMMA >
  arg0 = valueOrCollection()
  (< COMMA >
  arg1 = < VALUE >)?)?
  < CLOSE_PAR > 
  { 
    if( attribute == null  ) 
      builder.addSimpleExpression(operation.image, attributeOrJoin.image, arg0, nullSafeImage(arg1));
    else
      builder.addJoinedExpression(operation.image, attributeOrJoin.image, attribute.image, arg0, nullSafeImage(arg1));
  }  
}

Object valueOrCollection() :
{ Object o = null; }
{
  (o = value() | o = collection())
  { return o; }   
}

Object value() :
{ Token v; }
{
  v =  <VALUE>
  { return v.image; }
}

List<Object> collection() :
{ CollectionBuilder b = new CollectionBuilder(); }
{	
	<OPEN_BRACKET>
	collectionElement(b)
	( < COMMA > collectionElement(b))*	
	<CLOSE_BRACKET>
	{ return b.build(); }
}

void collectionElement(CollectionBuilder b ) :
{ }
{
	collectionEnumElement(b) | collectionInternalIdElement(b) | collectionExternalIdElement(b)
}

void collectionEnumElement(CollectionBuilder b) :
{ Token id; }
{
  id = < IDENTIFIER >
  { b.addEnumElement( id.image); }
}

void collectionInternalIdElement(CollectionBuilder b) :
{ Token id; }
{
  
  < INTERNAL > < OPEN_PAR >
  id = < VALUE > 
  <CLOSE_PAR> 
  { b.addInternalIdElement( id.image); }
}

void collectionExternalIdElement(CollectionBuilder b) :
{ Token id; }
{
  < EXTERNAL > < OPEN_PAR >
  id = < VALUE > 
  <CLOSE_PAR> 
  { b.addExternalIdElement( id.image); }
}

